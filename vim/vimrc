set nocompatible
set shell=/bin/bash

so ~/.vim/plugins.vim

filetype on 
filetype plugin on 
filetype indent on 
syntax enable
set backspace=indent,eol,start            "Make backspace behave like every other editor.
let mapleader = ','                       "The default is \, but a comma is much better.
set number                                "Let's activate line numbers.
set autowrite                             "Save on buffer switch


set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287

set nowrap                      " don't wrap lines

" Softtabs, 3 spaces
set tabstop=3
set shiftwidth=3
set shiftround             " use multiple of shiftwidth when indenting with '<' and '>'
set expandtab
set smarttab
set softtabstop=3          " when hitting <BS>, pretend like a tab is removed, even if spaces


set smartcase              " ignore case if search pattern is all lowercase
set cursorline
set splitright

"-------------Visuals--------------"
colorscheme gruvbox 
set background=dark

set t_CO=256                    "Use 256 colors. This is useful for Terminal Vim.

hi vertsplit guifg=bg guibg=bg


"-------------Search--------------"
set hlsearch                              "Highlight all matched terms.
set incsearch                             "Incrementally highlight, as we type.

"-------------Split Management--------------"
set splitbelow                            "Make splits default to below...
set splitright                            "And to the right. This feels more natural.


"We'll set simpler mappings to switch between splits.
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-H> <C-W><C-H>
nmap <C-L> <C-W><C-L>



"-------------Mappings--------------"

" Down is really the next line
nnoremap j gj
nnoremap k gk

"Make tabs sensible
nnoremap tl :tabnext<CR>
nnoremap th :tabprev<CR>
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>

"Make it easy to edit the Vimrc file.
nmap <Leader>ev :tabedit $MYVIMRC<cr>

"Add simple highlight removal.
nmap <Leader><space> :nohlsearch<cr>

imap jk <Esc>

"Make NERDTree easier to toggle
nmap <C-n> :NERDTreeToggle<cr>
  
nmap <C-e> :CtrlPMRUFiles<cr>
"nmap <C-m> :CtrlPBufTag<cr>

nmap <S-Insert> "+p

" Switch between the last two files
nnoremap <leader><leader> <c-^>

"-------------Plugins--------------"

"/
"/ CtrlP
"/
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$|node_modules' 
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:10,results:10'

"CTRL-P won't cache (seems fast enough for now)
let g:ctrlp_use_caching = 0

"/
"/ NERDTree 
"/
let NERDTreeHijackNetrw = 0
"Closes vim if NERDTree is the only buffer open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"/
"/ Ag
"/
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'
endif


"/
"/ Syntastic
"/
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"/
"/ Powerline
"/
set encoding=utf-8
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''


"-------------Auto-Commands--------------"
"Automatically source the Vimrc file on save.

augroup autosourcing
   autocmd!
   autocmd BufWritePost .vimrc source %
augroup END
